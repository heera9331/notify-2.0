generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("ONLINE_DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  username String    @unique
  password String
  posts    Post[]
  Comment  Comment[]
  Note     Note[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  postType  PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id]) // Relates a post to its author
  comments  Comment[]
  tags      Tag[]     @relation("PostTags") // Many-to-many relation with Tag
}

model Note {
  id         Int       @id @default(autoincrement())
  title      String
  content    String    @db.Text
  parentId   Int? // Nullable for root notes
  parent     Note?     @relation("NoteParent", fields: [parentId], references: [id]) // Self-relation for hierarchical notes
  children   Note[]    @relation("NoteParent") // For child notes
  userId     Int
  user       User      @relation(fields: [userId], references: [id]) // Relates a note to its author
  comments   Comment[]
  tags       Tag[]     @relation("NoteTags") // Many-to-many relation with Tag
  isArchived Boolean   @default(false) // Indicates if the note is archived
  isDeleted  Boolean   @default(false) // Indicates if the note is soft-deleted
  isPublic   Boolean   @default(false) // Indicates if the note is public
  category   String? // Optional field for note categorization
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum PostType {
  POST
  NOTE
  TASK
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  postId   Int
  userId   Int
  parentId Int    @default(0)
  post     Post   @relation(fields: [postId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  Note     Note?  @relation(fields: [noteId], references: [id])
  noteId   Int?
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags") // Many-to-many relation with Post
  notes Note[] @relation("NoteTags") // Many-to-many relation with Note
}
